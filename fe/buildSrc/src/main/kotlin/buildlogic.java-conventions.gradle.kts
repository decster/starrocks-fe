/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    `java-library`
    `maven-publish`
    id("checkstyle") // Apply checkstyle plugin
}

// Access the version catalog
val libs = extensions.getByType<VersionCatalogsExtension>().named("libs")

repositories {
    mavenLocal()
    mavenCentral() // Simplified, assuming these cover the general-env
    maven { url = uri("https://repository.cloudera.com/repository/public/") }
    maven { url = uri("https://repository.cloudera.com/repository/cloudera-repos/") }
    maven { url = uri("https://mirror.iscas.ac.cn/kunpeng/maven/") }
    // Consider adding logic for CUSTOM_MAVEN_REPO if needed globally
    // (e.g. checking for System.getenv("CUSTOM_MAVEN_REPO") and adding it if present)
}

group = "com.starrocks"
version = "3.4.0" // This should be the version of the FE project itself

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8 // Ensure target compatibility is also set
    // For stricter JDK control, consider using toolchains:
    // toolchain {
    //     languageVersion.set(JavaLanguageVersion.of(8))
    // }
}

dependencies {
    // Import BOMs to manage versions, similar to Maven's <scope>import</scope>
    // These effectively provide managed dependency versions.
    api(platform(libs.aws.sdk.bom))
    api(platform(libs.azure.sdk.bom))
    api(platform(libs.opentelemetry.bom))

    constraints {
        val becauseDepMgmt = "Defined in parent POM's dependencyManagement"

        // General Commons
        api(libs.commons.cli.commons.cli) { because(becauseDepMgmt) }
        api(libs.commons.codec.commons.codec) { because(becauseDepMgmt) }
        api(libs.commons.lang.commons.lang) { because(becauseDepMgmt) }
        api(libs.org.apache.commons.commons.lang3) { because(becauseDepMgmt) }
        api(libs.org.apache.commons.commons.pool2) { because(becauseDepMgmt) }
        api(libs.commons.validator.commons.validator) { because(becauseDepMgmt) }
        api(libs.commons.io.commons.io) { because(becauseDepMgmt) }
        api(libs.commons.collections.commons.collections) { because(becauseDepMgmt) }
        api(libs.commons.beanutils) { because(becauseDepMgmt) }
        api(libs.org.apache.commons.commons.dbcp2) { because(becauseDepMgmt) }

        // Google Guava & Gson
        api(libs.com.google.guava.guava) { because(becauseDepMgmt) }
        api(libs.com.google.code.gson.gson) { because(becauseDepMgmt) }

        // Jackson
        api(libs.com.fasterxml.jackson.core.jackson.annotations) { because(becauseDepMgmt) }
        api(libs.com.fasterxml.jackson.core.jackson.core) { because(becauseDepMgmt) }
        api(libs.com.fasterxml.jackson.core.jackson.databind) { because(becauseDepMgmt) }
        api(libs.com.fasterxml.jackson.dataformat.jackson.dataformat.yaml) { because(becauseDepMgmt) }
        api(libs.com.fasterxml.jackson.module.jackson.module.jaxb.annotations) { because(becauseDepMgmt) }
        api(libs.com.fasterxml.uuid.java.uuid.generator) { because(becauseDepMgmt) }

        // Logging (Log4j, SLF4J)
        api(libs.org.slf4j.slf4j.api) { because(becauseDepMgmt) }
        api(libs.org.apache.logging.log4j.log4j.api) { because(becauseDepMgmt) }
        api(libs.org.apache.logging.log4j.log4j.core) { because(becauseDepMgmt) }
        api(libs.org.apache.logging.log4j.log4j.slf4j.impl) { because(becauseDepMgmt) }
        api(libs.org.apache.logging.log4j.log4j.layout.template.json) { because(becauseDepMgmt) }
        api(libs.org.apache.logging.log4j.log4j.v1.v2.api) { because(becauseDepMgmt) } // For log4j-1.2-api

        // Netty & Protobuf
        api(libs.io.netty.netty.all) { because(becauseDepMgmt) }
        api(libs.io.netty.netty.handler) { because(becauseDepMgmt) }
        api(libs.com.google.protobuf.protobuf.java) { because(becauseDepMgmt) }
        api(libs.com.google.protobuf.protobuf.java.util) { because(becauseDepMgmt) }

        // GRPC
        api(libs.io.grpc.grpc.api) { because(becauseDepMgmt) }
        api(libs.io.grpc.grpc.core) { because(becauseDepMgmt) }
        api(libs.io.grpc.grpc.netty.shaded) { because(becauseDepMgmt) }
        api(libs.io.grpc.grpc.protobuf) { because(becauseDepMgmt) }
        api(libs.io.grpc.grpc.stub) { because(becauseDepMgmt) }

        // Arrow
        api(libs.org.apache.arrow.arrow.vector) { because(becauseDepMgmt) }
        api(libs.org.apache.arrow.arrow.memory.netty) { because(becauseDepMgmt) }
        api(libs.org.apache.arrow.flight.core) { because(becauseDepMgmt) }
        api(libs.org.apache.arrow.flight.sql) { because(becauseDepMgmt) }
        api(libs.org.apache.arrow.arrow.jdbc) { because(becauseDepMgmt) }
        // api(libs.org.apache.arrow.flight.sql.jdbc.driver) { because(becauseDepMgmt) } // test scope in pom

        // Hadoop Ecosystem (Hadoop, Parquet, Avro)
        api(libs.org.apache.hadoop.hadoop.common) { because(becauseDepMgmt) }
        api(libs.org.apache.hadoop.hadoop.hdfs) { because(becauseDepMgmt) }
        api(libs.org.apache.hadoop.hadoop.client) { because(becauseDepMgmt) }
        api(libs.org.apache.hadoop.hadoop.client.api) { because(becauseDepMgmt) }
        api(libs.org.apache.hadoop.hadoop.client.runtime) { because(becauseDepMgmt) }
        api(libs.org.apache.hadoop.hadoop.aws) { because(becauseDepMgmt) }
        api(libs.org.apache.hadoop.hadoop.aliyun) { because(becauseDepMgmt) }
        api(libs.org.apache.hadoop.hadoop.azure) { because(becauseDepMgmt) }
        api(libs.org.apache.hadoop.hadoop.azure.datalake) { because(becauseDepMgmt) }
        api(libs.org.apache.parquet.parquet.common) { because(becauseDepMgmt) }
        api(libs.org.apache.parquet.parquet.column) { because(becauseDepMgmt) }
        api(libs.org.apache.parquet.parquet.hadoop) { because(becauseDepMgmt) }
        api(libs.org.apache.parquet.parquet.avro) { because(becauseDepMgmt) }
        api(libs.org.apache.avro.avro) { because(becauseDepMgmt) }


        // Spark (using v2.v12 as per TOML naming convention for spark-core_2.12)
        // Note: Spark version can be profile-dependent in Maven. Gradle needs a mechanism (e.g. properties) to switch.
        api(libs.org.apache.spark.spark.core.v2.v12) { because(becauseDepMgmt) }
        api(libs.org.apache.spark.spark.launcher.v2.v12) { because(becauseDepMgmt) }
        // api(libs.org.apache.spark.spark.sql.v2.v12) { because(becauseDepMgmt) } // provided scope in pom
        // api(libs.org.apache.spark.spark.catalyst.v2.v12) { because(becauseDepMgmt) } // provided scope in pom

        // Jetty (ensure these library aliases exist in libs.versions.toml)
        api(libs.jetty.client) { because(becauseDepMgmt) }
        api(libs.jetty.server) { because(becauseDepMgmt) }
        api(libs.jetty.io) { because(becauseDepMgmt) }
        api(libs.jetty.webapp) { because(becauseDepMgmt) }
        api(libs.jetty.servlet) { because(becauseDepMgmt) }
        api(libs.jetty.util) { because(becauseDepMgmt) }
        api(libs.jetty.util.ajax) { because(becauseDepMgmt) }
        api(libs.jetty.security) { because(becauseDepMgmt) }

        // Other notable direct dependencies from dependencyManagement
        api(libs.org.apache.kudu.kudu.client) { because(becauseDepMgmt) }
        api(libs.org.apache.thrift.libthrift) { because(becauseDepMgmt) }
        api(libs.org.apache.ivy.ivy) { because(becauseDepMgmt) }
        api(libs.com.starrocks.jprotobuf.starrocks) { because(becauseDepMgmt) }
        api(libs.com.starrocks.starrocks.bdb.je) { because(becauseDepMgmt) }
        api(libs.com.github.seancfoley.ipaddress) { because(becauseDepMgmt) }
        api(libs.org.apache.velocity.velocity.engine.core) { because(becauseDepMgmt) }
        api(libs.org.apache.httpcomponents.client5.httpclient5) { because(becauseDepMgmt) }
        api(libs.com.squareup.okhttp3.okhttp) { because(becauseDepMgmt) }
        api(libs.com.squareup.okio.okio) { because(becauseDepMgmt) }
        api(libs.javax.validation.validation.api) { because(becauseDepMgmt) }
        api(libs.com.github.oshi.oshi.core) { because(becauseDepMgmt) }
        api(libs.org.apache.kafka.kafka.clients) { because(becauseDepMgmt) } // Check alias, pom uses kafka-clients.version
        api(libs.org.jboss.xnio.xnio.nio) { because(becauseDepMgmt) }
        api(libs.javax.annotation.javax.annotation.api) { because(becauseDepMgmt) }
        api(libs.com.sun.activation.javax.activation) { because(becauseDepMgmt) }
        // api(libs.javax.xml.ws.jaxws.api) { because(becauseDepMgmt) } // Check alias if needed
        api(libs.org.roaringbitmap.roaringbitmap) { because(becauseDepMgmt) }
        api(libs.dnsjava) { because(becauseDepMgmt) }
        api(libs.org.jdom.jdom2) { because(becauseDepMgmt) }
        api(libs.com.nimbusds.jose.jwt) { because(becauseDepMgmt) }
        api(libs.org.xerial.snappy.snappy.java) { because(becauseDepMgmt) }
        api(libs.org.antlr.antlr4) { because(becauseDepMgmt) }
        api(libs.org.jboss.byteman.byteman) { because(becauseDepMgmt) }
        api(libs.it.unimi.dsi.fastutil) { because(becauseDepMgmt) }

        // JDBC drivers
        api(libs.org.mariadb.jdbc.mariadb.java.client) { because(becauseDepMgmt) }
        api(libs.org.postgresql.postgresql) { because(becauseDepMgmt) }
        api(libs.com.clickhouse.clickhouse.jdbc) { because(becauseDepMgmt) }
        api(libs.com.oracle.database.jdbc.ojdbc10) { because(becauseDepMgmt) }
        api(libs.com.oracle.database.nls.orai18n) { because(becauseDepMgmt) }
        api(libs.com.microsoft.sqlserver.mssql.jdbc) { because(becauseDepMgmt) }
        api(libs.com.mysql.mysql.connector.j) { because(becauseDepMgmt) }

        // Connectors & Catalogs
        api(libs.io.trino.hive.hive.apache) { because(becauseDepMgmt) }
        api(libs.com.aliyun.datalake20200710) { because(becauseDepMgmt) }
        api(libs.com.aliyun.datalake.metastore.client.hive3) { because(becauseDepMgmt) }
        api(libs.com.google.cloud.bigdataoss.gcs.connector) { because(becauseDepMgmt) }
        api(libs.org.apache.hudi.hudi.common) { because(becauseDepMgmt) }
        // ... other hudi modules ...
        api(libs.org.apache.iceberg.iceberg.api) { because(becauseDepMgmt) }
        // ... other iceberg modules ...
        api(libs.org.apache.paimon.paimon.bundle) { because(becauseDepMgmt) }
        // ... other paimon modules ...
        api(libs.io.delta.delta.kernel.api) { because(becauseDepMgmt) }
        // ... other delta modules ...


        // Provided/Test scope dependencies from dependencyManagement are generally not constrained globally here.
        // They are used directly in the subprojects that need them.
        // e.g. jmockit, junit, spark-sql, spark-catalyst, jprotobuf-precompile-plugin

        // Note: This list is extensive but aims to cover most non-BOM managed dependencies.
        // A full project might opt for a dedicated java-platform module for these.
        // Some library aliases might need to be verified or added to libs.versions.toml
        // (e.g. for kafka-clients, jaxb-api, etc. if not perfectly matching).
    }
}


publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
        // For published libraries, ensure the POM includes dependency management information.
        // This can be configured further if these modules are intended for external consumption.
    }
}

tasks.withType<JavaCompile>().configureEach { // Use configureEach for better performance and safety
    options.encoding = "UTF-8"
    // options.compilerArgs.add("-Xlint:all") // Example: enable more warnings
}

tasks.withType<Javadoc>().configureEach {
    options.encoding = "UTF-8"
    // Add other Javadoc configurations if necessary (e.g., failOnError = false)
}

// Configure Checkstyle based on fe/pom.xml and fe-common/pom.xml
checkstyle {
    toolVersion = libs.versions.puppycrawl.get() // Use version from libs.versions.toml
    configFile = rootProject.file("checkstyle.xml") // Assumes checkstyle.xml is at the root of the 'fe' multi-project build
                                                    // If it's in fe-common, adjust path: project(":fe-common").file("checkstyle.xml")
                                                    // Or make it accessible globally, e.g. file("../checkstyle.xml") if fe is a sub-project of a larger root.
                                                    // For now, assuming 'fe' is the root for checkstyle.xml
    isIgnoreFailures = false // Corresponds to <failsOnError>true</failsOnError> in fe-common/pom.xml
    isShowViolations = true // Corresponds to <consoleOutput>true</consoleOutput> in fe-common/pom.xml
    // maxWarnings = 0 // Enforce zero warnings, typical for CI

    // The <excludes>**/jmockit/**/*</excludes> from fe-common/pom.xml
    // needs to be applied to the source set used by checkstyle.
    // This is often done by configuring the Checkstyle task's source property,
    // or by configuring the sourceSet itself if Checkstyle uses it directly.
    // For simplicity, direct exclusion on the task can be done if Checkstyle version supports it well.
}

tasks.withType<Checkstyle>().configureEach {
    // This exclusion pattern applies to files found by the source sets.
    exclude("**/jmockit/**/*") // From fe-common/pom.xml

    reports {
        xml.required.set(false) // Maven's linkXRef=false; XML not primary
        html.required.set(true) // Enable HTML report by default
    }
}

tasks.withType<Test>().configureEach {
    // failIfNoSpecifiedTests=false in Maven (specifically for fe-common).
    // Gradle's default behavior: Test task succeeds if it has no matching tests for its source set.
    // So, no explicit global configuration needed for this specific flag here unless subprojects override.

    useJUnitPlatform() // Recommended for modern JUnit 5 tests.
                       // If still on JUnit 4 primarily, useJUnit() might be explicit.
                       // pom.xml dependencyManagement has junit:junit:4.13.1

    // Add further test configurations like logging, reports, system properties etc.
    // testLogging { events("passed", "skipped", "failed") }
}
