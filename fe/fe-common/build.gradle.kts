/*
 * This file was generated by the Gradle 'init' task.
 * It has been subsequently modified.
 */

plugins {
    id("buildlogic.java-conventions") // Applies Java, Checkstyle, and basic dependency management (BOMs)
}

description = "fe-common" // From original build.gradle.kts

// The 'buildlogic.java-conventions' plugin applies common configurations,
// including Java version, Checkstyle, and imports platform BOMs (AWS, Azure, OpenTelemetry)
// which manage versions for some dependencies.

// Dependencies specific to fe-common:
// The fe-common/pom.xml does not list any direct dependencies. They are inherited
// from the parent fe/pom.xml's <dependencyManagement> section.
// The buildlogic.java-conventions plugin currently imports some BOMs.
// However, many other dependencies in fe/pom.xml's <dependencyManagement>
// (e.g., Guava, Commons, Jackson, Log4j, local project modules like :plugin-common)
// are not yet automatically constrained by the current convention plugin setup
// unless a full platform module is implemented or all constraints are added to the convention plugin.
//
// Therefore, fe-common needs to explicitly declare the dependencies it uses.
// Versions should be sourced from libs.versions.toml where available,
// or directly if not yet cataloged (though cataloging is preferred).
//
// Example:
// val libs = extensions.getByType<VersionCatalogsExtension>().named("libs")
//
// dependencies {
//     // Examples of commonly used libraries that might be needed by fe-common.
//     // These need to be verified against actual imports in fe-common's source code.
//     implementation(libs.com.google.guava.guava)
//     implementation(libs.org.apache.commons.commons.lang3)
//     api(libs.org.slf4j.slf4j.api) // Or implementation, depending on usage
//     implementation(libs.org.apache.logging.log4j.log4j.api)
//     implementation(libs.org.apache.logging.log4j.log4j.core)
//
//     // If fe-common depends on other local modules from this build:
//     // implementation(project(":plugin-common"))
//
//     // Add other necessary dependencies here, referring to libs.versions.toml
//     // For dependencies with exclusions as defined in fe/pom.xml, apply them here:
//     // implementation(libs.org.apache.kudu.kudu.client) {
//     //     exclude(group = "io.netty", module = "netty-handler")
//     // }
// }

// Any fe-common specific configurations can be added below.
// For example, if fe-common needed a different Checkstyle configuration than the global one
// (e.g. its own checkstyle.xml at fe-common/checkstyle.xml instead of the root one):
// tasks.named<Checkstyle>("checkstyleMain") { // Or checkstyleTest
//    configFile = file("checkstyle.xml")
//    // To revert exclusions if the global one has some that fe-common doesn't want:
//    // setExcludes(setOf()) // Clears global excludes for this task
//    // exclude("some-other-pattern-specific-to-fe-common")
// }
// However, for now, we assume the convention plugin's Checkstyle config is sufficient or globally applicable.
